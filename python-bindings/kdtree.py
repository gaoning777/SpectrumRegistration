# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kdtree', [dirname(__file__)])
        except ImportError:
            import _kdtree
            return _kdtree
        if fp is not None:
            try:
                _mod = imp.load_module('_kdtree', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kdtree = swig_import_helper()
    del swig_import_helper
else:
    import _kdtree
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class KDTree_2Int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tree = _swig_property(_kdtree.KDTree_2Int_tree_get, _kdtree.KDTree_2Int_tree_set)
    def __init__(self): 
        this = _kdtree.new_KDTree_2Int()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _kdtree.KDTree_2Int_add(self, *args)
    def remove(self, *args): return _kdtree.KDTree_2Int_remove(self, *args)
    def size(self): return _kdtree.KDTree_2Int_size(self)
    def optimize(self): return _kdtree.KDTree_2Int_optimize(self)
    def find_exact(self, *args): return _kdtree.KDTree_2Int_find_exact(self, *args)
    def count_within_range(self, *args): return _kdtree.KDTree_2Int_count_within_range(self, *args)
    def find_within_range(self, *args): return _kdtree.KDTree_2Int_find_within_range(self, *args)
    def find_nearest(self, *args): return _kdtree.KDTree_2Int_find_nearest(self, *args)
    def get_all(self): return _kdtree.KDTree_2Int_get_all(self)
    def __len__(self): return _kdtree.KDTree_2Int___len__(self)
    __swig_destroy__ = _kdtree.delete_KDTree_2Int
    __del__ = lambda self : None;
KDTree_2Int_swigregister = _kdtree.KDTree_2Int_swigregister
KDTree_2Int_swigregister(KDTree_2Int)

class KDTree_3Int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tree = _swig_property(_kdtree.KDTree_3Int_tree_get, _kdtree.KDTree_3Int_tree_set)
    def __init__(self): 
        this = _kdtree.new_KDTree_3Int()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _kdtree.KDTree_3Int_add(self, *args)
    def remove(self, *args): return _kdtree.KDTree_3Int_remove(self, *args)
    def size(self): return _kdtree.KDTree_3Int_size(self)
    def optimize(self): return _kdtree.KDTree_3Int_optimize(self)
    def find_exact(self, *args): return _kdtree.KDTree_3Int_find_exact(self, *args)
    def count_within_range(self, *args): return _kdtree.KDTree_3Int_count_within_range(self, *args)
    def find_within_range(self, *args): return _kdtree.KDTree_3Int_find_within_range(self, *args)
    def find_nearest(self, *args): return _kdtree.KDTree_3Int_find_nearest(self, *args)
    def get_all(self): return _kdtree.KDTree_3Int_get_all(self)
    def __len__(self): return _kdtree.KDTree_3Int___len__(self)
    __swig_destroy__ = _kdtree.delete_KDTree_3Int
    __del__ = lambda self : None;
KDTree_3Int_swigregister = _kdtree.KDTree_3Int_swigregister
KDTree_3Int_swigregister(KDTree_3Int)

class KDTree_4Int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tree = _swig_property(_kdtree.KDTree_4Int_tree_get, _kdtree.KDTree_4Int_tree_set)
    def __init__(self): 
        this = _kdtree.new_KDTree_4Int()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _kdtree.KDTree_4Int_add(self, *args)
    def remove(self, *args): return _kdtree.KDTree_4Int_remove(self, *args)
    def size(self): return _kdtree.KDTree_4Int_size(self)
    def optimize(self): return _kdtree.KDTree_4Int_optimize(self)
    def find_exact(self, *args): return _kdtree.KDTree_4Int_find_exact(self, *args)
    def count_within_range(self, *args): return _kdtree.KDTree_4Int_count_within_range(self, *args)
    def find_within_range(self, *args): return _kdtree.KDTree_4Int_find_within_range(self, *args)
    def find_nearest(self, *args): return _kdtree.KDTree_4Int_find_nearest(self, *args)
    def get_all(self): return _kdtree.KDTree_4Int_get_all(self)
    def __len__(self): return _kdtree.KDTree_4Int___len__(self)
    __swig_destroy__ = _kdtree.delete_KDTree_4Int
    __del__ = lambda self : None;
KDTree_4Int_swigregister = _kdtree.KDTree_4Int_swigregister
KDTree_4Int_swigregister(KDTree_4Int)

class KDTree_5Int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tree = _swig_property(_kdtree.KDTree_5Int_tree_get, _kdtree.KDTree_5Int_tree_set)
    def __init__(self): 
        this = _kdtree.new_KDTree_5Int()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _kdtree.KDTree_5Int_add(self, *args)
    def remove(self, *args): return _kdtree.KDTree_5Int_remove(self, *args)
    def size(self): return _kdtree.KDTree_5Int_size(self)
    def optimize(self): return _kdtree.KDTree_5Int_optimize(self)
    def find_exact(self, *args): return _kdtree.KDTree_5Int_find_exact(self, *args)
    def count_within_range(self, *args): return _kdtree.KDTree_5Int_count_within_range(self, *args)
    def find_within_range(self, *args): return _kdtree.KDTree_5Int_find_within_range(self, *args)
    def find_nearest(self, *args): return _kdtree.KDTree_5Int_find_nearest(self, *args)
    def get_all(self): return _kdtree.KDTree_5Int_get_all(self)
    def __len__(self): return _kdtree.KDTree_5Int___len__(self)
    __swig_destroy__ = _kdtree.delete_KDTree_5Int
    __del__ = lambda self : None;
KDTree_5Int_swigregister = _kdtree.KDTree_5Int_swigregister
KDTree_5Int_swigregister(KDTree_5Int)

class KDTree_6Int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tree = _swig_property(_kdtree.KDTree_6Int_tree_get, _kdtree.KDTree_6Int_tree_set)
    def __init__(self): 
        this = _kdtree.new_KDTree_6Int()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _kdtree.KDTree_6Int_add(self, *args)
    def remove(self, *args): return _kdtree.KDTree_6Int_remove(self, *args)
    def size(self): return _kdtree.KDTree_6Int_size(self)
    def optimize(self): return _kdtree.KDTree_6Int_optimize(self)
    def find_exact(self, *args): return _kdtree.KDTree_6Int_find_exact(self, *args)
    def count_within_range(self, *args): return _kdtree.KDTree_6Int_count_within_range(self, *args)
    def find_within_range(self, *args): return _kdtree.KDTree_6Int_find_within_range(self, *args)
    def find_nearest(self, *args): return _kdtree.KDTree_6Int_find_nearest(self, *args)
    def get_all(self): return _kdtree.KDTree_6Int_get_all(self)
    def __len__(self): return _kdtree.KDTree_6Int___len__(self)
    __swig_destroy__ = _kdtree.delete_KDTree_6Int
    __del__ = lambda self : None;
KDTree_6Int_swigregister = _kdtree.KDTree_6Int_swigregister
KDTree_6Int_swigregister(KDTree_6Int)

class KDTree_2Float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tree = _swig_property(_kdtree.KDTree_2Float_tree_get, _kdtree.KDTree_2Float_tree_set)
    def __init__(self): 
        this = _kdtree.new_KDTree_2Float()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _kdtree.KDTree_2Float_add(self, *args)
    def remove(self, *args): return _kdtree.KDTree_2Float_remove(self, *args)
    def size(self): return _kdtree.KDTree_2Float_size(self)
    def optimize(self): return _kdtree.KDTree_2Float_optimize(self)
    def find_exact(self, *args): return _kdtree.KDTree_2Float_find_exact(self, *args)
    def count_within_range(self, *args): return _kdtree.KDTree_2Float_count_within_range(self, *args)
    def find_within_range(self, *args): return _kdtree.KDTree_2Float_find_within_range(self, *args)
    def find_nearest(self, *args): return _kdtree.KDTree_2Float_find_nearest(self, *args)
    def get_all(self): return _kdtree.KDTree_2Float_get_all(self)
    def __len__(self): return _kdtree.KDTree_2Float___len__(self)
    __swig_destroy__ = _kdtree.delete_KDTree_2Float
    __del__ = lambda self : None;
KDTree_2Float_swigregister = _kdtree.KDTree_2Float_swigregister
KDTree_2Float_swigregister(KDTree_2Float)

class KDTree_3Float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tree = _swig_property(_kdtree.KDTree_3Float_tree_get, _kdtree.KDTree_3Float_tree_set)
    def __init__(self): 
        this = _kdtree.new_KDTree_3Float()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _kdtree.KDTree_3Float_add(self, *args)
    def remove(self, *args): return _kdtree.KDTree_3Float_remove(self, *args)
    def size(self): return _kdtree.KDTree_3Float_size(self)
    def optimize(self): return _kdtree.KDTree_3Float_optimize(self)
    def find_exact(self, *args): return _kdtree.KDTree_3Float_find_exact(self, *args)
    def count_within_range(self, *args): return _kdtree.KDTree_3Float_count_within_range(self, *args)
    def find_within_range(self, *args): return _kdtree.KDTree_3Float_find_within_range(self, *args)
    def find_nearest(self, *args): return _kdtree.KDTree_3Float_find_nearest(self, *args)
    def get_all(self): return _kdtree.KDTree_3Float_get_all(self)
    def __len__(self): return _kdtree.KDTree_3Float___len__(self)
    __swig_destroy__ = _kdtree.delete_KDTree_3Float
    __del__ = lambda self : None;
KDTree_3Float_swigregister = _kdtree.KDTree_3Float_swigregister
KDTree_3Float_swigregister(KDTree_3Float)

class KDTree_4Float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tree = _swig_property(_kdtree.KDTree_4Float_tree_get, _kdtree.KDTree_4Float_tree_set)
    def __init__(self): 
        this = _kdtree.new_KDTree_4Float()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _kdtree.KDTree_4Float_add(self, *args)
    def remove(self, *args): return _kdtree.KDTree_4Float_remove(self, *args)
    def size(self): return _kdtree.KDTree_4Float_size(self)
    def optimize(self): return _kdtree.KDTree_4Float_optimize(self)
    def find_exact(self, *args): return _kdtree.KDTree_4Float_find_exact(self, *args)
    def count_within_range(self, *args): return _kdtree.KDTree_4Float_count_within_range(self, *args)
    def find_within_range(self, *args): return _kdtree.KDTree_4Float_find_within_range(self, *args)
    def find_nearest(self, *args): return _kdtree.KDTree_4Float_find_nearest(self, *args)
    def get_all(self): return _kdtree.KDTree_4Float_get_all(self)
    def __len__(self): return _kdtree.KDTree_4Float___len__(self)
    __swig_destroy__ = _kdtree.delete_KDTree_4Float
    __del__ = lambda self : None;
KDTree_4Float_swigregister = _kdtree.KDTree_4Float_swigregister
KDTree_4Float_swigregister(KDTree_4Float)

class KDTree_5Float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tree = _swig_property(_kdtree.KDTree_5Float_tree_get, _kdtree.KDTree_5Float_tree_set)
    def __init__(self): 
        this = _kdtree.new_KDTree_5Float()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _kdtree.KDTree_5Float_add(self, *args)
    def remove(self, *args): return _kdtree.KDTree_5Float_remove(self, *args)
    def size(self): return _kdtree.KDTree_5Float_size(self)
    def optimize(self): return _kdtree.KDTree_5Float_optimize(self)
    def find_exact(self, *args): return _kdtree.KDTree_5Float_find_exact(self, *args)
    def count_within_range(self, *args): return _kdtree.KDTree_5Float_count_within_range(self, *args)
    def find_within_range(self, *args): return _kdtree.KDTree_5Float_find_within_range(self, *args)
    def find_nearest(self, *args): return _kdtree.KDTree_5Float_find_nearest(self, *args)
    def get_all(self): return _kdtree.KDTree_5Float_get_all(self)
    def __len__(self): return _kdtree.KDTree_5Float___len__(self)
    __swig_destroy__ = _kdtree.delete_KDTree_5Float
    __del__ = lambda self : None;
KDTree_5Float_swigregister = _kdtree.KDTree_5Float_swigregister
KDTree_5Float_swigregister(KDTree_5Float)

class KDTree_6Float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tree = _swig_property(_kdtree.KDTree_6Float_tree_get, _kdtree.KDTree_6Float_tree_set)
    def __init__(self): 
        this = _kdtree.new_KDTree_6Float()
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return _kdtree.KDTree_6Float_add(self, *args)
    def remove(self, *args): return _kdtree.KDTree_6Float_remove(self, *args)
    def size(self): return _kdtree.KDTree_6Float_size(self)
    def optimize(self): return _kdtree.KDTree_6Float_optimize(self)
    def find_exact(self, *args): return _kdtree.KDTree_6Float_find_exact(self, *args)
    def count_within_range(self, *args): return _kdtree.KDTree_6Float_count_within_range(self, *args)
    def find_within_range(self, *args): return _kdtree.KDTree_6Float_find_within_range(self, *args)
    def find_nearest(self, *args): return _kdtree.KDTree_6Float_find_nearest(self, *args)
    def get_all(self): return _kdtree.KDTree_6Float_get_all(self)
    def __len__(self): return _kdtree.KDTree_6Float___len__(self)
    __swig_destroy__ = _kdtree.delete_KDTree_6Float
    __del__ = lambda self : None;
KDTree_6Float_swigregister = _kdtree.KDTree_6Float_swigregister
KDTree_6Float_swigregister(KDTree_6Float)



